[
{
	"uri": "//localhost:1313/vi/1.-workshop-outline/",
	"title": "Đề cương Hội thảo",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Sau khi hoàn thành hội thảo này, bạn sẽ có thể:\nTạo bảng Amazon DynamoDB để lưu trữ dữ liệu Tạo API RESTful với Amazon API Gateway Tạo các hàm AWS Lambda được kích hoạt bởi API Gateway Kết nối các hàm AWS Lambda với Amazon Simple Notification Service (SNS) Sử dụng Amazon Polly để tổng hợp giọng nói bằng nhiều ngôn ngữ và giọng điệu khác nhau Thời lượng Hội thảo này kéo dài khoảng 90 phút để hoàn thành.\nMôi trường Hội thảo Bạn sẽ xây dựng một ứng dụng không máy chủ, nghĩa là bạn không cần làm việc với các máy chủ - không cần cung cấp, vá lỗi, hoặc mở rộng. AWS Cloud sẽ tự động xử lý các tác vụ này, cho phép bạn tập trung vào ứng dụng của mình.\nỨng dụng cung cấp hai phương pháp:\nGửi thông tin về các bài viết mới để chuyển đổi thành tệp MP3 Lấy thông tin về các bài viết (bao gồm các liên kết đến các tệp MP3 được lưu trữ trong Amazon S3 bucket) Cả hai phương pháp đều được hiển thị dưới dạng dịch vụ web RESTful thông qua Amazon API Gateway.\nKhi ứng dụng gửi thông tin về các bài viết mới: Thông tin được nhận bởi dịch vụ web RESTful được hiển thị bởi Amazon API Gateway. Dịch vụ web này được kích hoạt bởi một trang web tĩnh được lưu trữ trên Amazon Simple Storage Service (Amazon S3).\nAmazon API Gateway kích hoạt một hàm AWS Lambda, \u0026ldquo;Bài viết mới\u0026rdquo;, chịu trách nhiệm khởi tạo quá trình tạo tệp MP3.\nHàm Lambda chèn thông tin về bài viết vào bảng Amazon DynamoDB, nơi lưu trữ thông tin về tất cả các bài viết.\nĐể chạy toàn bộ quá trình không đồng bộ, Amazon Simple Notification Service (Amazon SNS) được sử dụng để tách rời quá trình nhận thông tin về các bài viết mới và bắt đầu chuyển đổi chúng thành tệp âm thanh.\nMột hàm Lambda khác, \u0026ldquo;Chuyển đổi thành âm thanh\u0026rdquo;, được đăng ký vào chủ đề SNS của bạn và được kích hoạt bất cứ khi nào có một tin nhắn mới xuất hiện (có nghĩa là một bài viết mới cần được chuyển đổi thành tệp âm thanh).\nHàm Lambda \u0026ldquo;Chuyển đổi thành âm thanh\u0026rdquo; sử dụng Amazon Polly để chuyển đổi văn bản thành tệp âm thanh bằng ngôn ngữ được chỉ định (cùng ngôn ngữ với văn bản).\nTệp MP3 mới được lưu trong một S3 bucket chuyên dụng.\nThông tin về bài viết được cập nhật trong bảng DynamoDB. URL đến tệp âm thanh được lưu trữ trong S3 bucket được lưu cùng với dữ liệu đã lưu trước đó.\nKhi ứng dụng lấy thông tin về các bài viết: Dịch vụ web RESTful được triển khai bằng Amazon API Gateway. Amazon API Gateway hiển thị phương pháp để lấy thông tin về các bài viết. Các phương pháp này chứa văn bản của bài viết và liên kết đến S3 bucket nơi tệp MP3 được lưu trữ. Dịch vụ web này được kích hoạt bởi một trang web tĩnh được lưu trữ trên Amazon S3.\nAmazon API Gateway kích hoạt hàm Lambda \u0026ldquo;Lấy bài viết\u0026rdquo;, triển khai logic để lấy dữ liệu bài viết.\nHàm Lambda \u0026ldquo;Lấy bài viết\u0026rdquo; lấy thông tin về bài viết (bao gồm tham chiếu đến Amazon S3) từ bảng DynamoDB và trả về thông tin đó.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Xây dựng ứng dụng Text-to-Speech không máy chủ với Amazon Polly",
	"tags": [],
	"description": "",
	"content": "Xây dựng ứng dụng Text-to-Speech không máy chủ với Amazon Polly Tổng quan Tổng hợp giọng nói là một thách thức phức tạp. Việc đọc từng chữ cái trong một câu không đảm bảo kết quả có ý nghĩa. Một số thách thức phổ biến trong ứng dụng text-to-speech bao gồm:\nTừ đồng âm khác nghĩa: \u0026ldquo;Tôi sống ở Las Vegas\u0026rdquo; so với \u0026ldquo;Buổi thuyết trình này phát trực tiếp từ Las Vegas\u0026rdquo;. Chuẩn hóa văn bản: Giải mã viết tắt, từ viết tắt và đơn vị đo lường. Ví dụ: \u0026ldquo;St.\u0026rdquo; có thể là \u0026ldquo;Street\u0026rdquo; hoặc \u0026ldquo;Saint\u0026rdquo;. Chuyển đổi văn bản thành âm vị: Trong tiếng Anh, \u0026ldquo;tough\u0026rdquo;, \u0026ldquo;through\u0026rdquo;, và \u0026ldquo;though\u0026rdquo; có cách phát âm khác nhau tùy thuộc vào ngữ cảnh. Từ ngoại lai: \u0026ldquo;déjà vu\u0026rdquo;, tên riêng như \u0026ldquo;François Hollande\u0026rdquo;, và tiếng lóng như \u0026ldquo;ASAP\u0026rdquo;, \u0026ldquo;LOL\u0026rdquo;. Amazon Polly cung cấp giải pháp vượt qua những thách thức này, cho phép bạn tập trung vào việc xây dựng ứng dụng text-to-speech mà không cần lo lắng về vấn đề diễn giải.\nAmazon Polly: Công nghệ AI tiên tiến Amazon Polly chuyển đổi văn bản thành giọng nói tự nhiên, cho phép bạn tạo ra các ứng dụng có khả năng giao tiếp như con người. Đây là dịch vụ AI của Amazon sử dụng công nghệ học sâu tiên tiến để tổng hợp giọng nói giống người thật. Hiện tại, Polly hỗ trợ hàng chục giọng nói chân thực bằng hơn 20 ngôn ngữ, giúp bạn xây dựng ứng dụng hỗ trợ giọng nói cho nhiều quốc gia khác nhau.\nƯu điểm nổi bật: Phản hồi nhanh: Hỗ trợ đối thoại tương tác thời gian thực Lưu trữ linh hoạt: Có thể lưu cache và tái sử dụng file âm thanh Không giới hạn sử dụng: Không tính phí bổ sung cho việc sử dụng giọng nói đã chuyển đổi Dễ dàng tích hợp: Chỉ cần gửi văn bản đến API của Amazon Polly Mục tiêu workshop Trong workshop này, bạn sẽ xây dựng một ứng dụng không máy chủ cơ bản sử dụng Amazon Polly để chuyển đổi văn bản thành giọng nói. Ứng dụng có giao diện người dùng đơn giản, cho phép nhập văn bản bằng nhiều ngôn ngữ khác nhau và chuyển đổi thành file âm thanh có thể phát trực tiếp trên trình duyệt web.\nMặc dù workshop này sử dụng bài viết blog làm ví dụ, bạn có thể áp dụng cho nhiều loại văn bản khác như:\nĐọc công thức nấu ăn trong khi nấu nướng Nghe tin tức hoặc sách khi đang lái xe hoặc đạp xe Hãy bắt đầu hành trình khám phá công nghệ text-to-speech với Amazon Polly!\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-1-create-a-dynamodb-table-copy-9/",
	"title": "Tạo bảng DynamoDB",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 1: Tạo bảng DynamoDB Trong nhiệm vụ này, chúng ta sẽ tạo một bảng Amazon DynamoDB để lưu trữ thông tin về các bài viết blog, bao gồm nội dung văn bản và URL của tệp MP3 tương ứng. Bảng này sẽ đóng vai trò là xương sống của việc lưu trữ dữ liệu cho ứng dụng của chúng ta.\nCác bước: Điều hướng đến Bảng điều khiển quản lý AWS. Trong thanh tìm kiếm ở trên cùng, gõ \u0026ldquo;DynamoDB\u0026rdquo; và chọn nó từ kết quả. Trên bảng điều khiển DynamoDB, nhấp vào \u0026ldquo;Create table\u0026rdquo;. Thiết lập bảng với các chi tiết sau: Tên bảng: posts Khóa phân vùng: id (String) Cài đặt bảng: Để mặc định Nhấp vào \u0026ldquo;Create table\u0026rdquo; để hoàn tất quá trình. Cấu trúc bảng Mặc dù chúng ta không cần phải định nghĩa toàn bộ cấu trúc ngay bây giờ, ứng dụng của chúng ta cuối cùng sẽ lưu trữ các thông tin sau trong bảng DynamoDB:\nid: Một định danh duy nhất cho mỗi bài viết (String, Khóa chính) status: Chỉ ra liệu tệp MP3 đã được tạo hay chưa (String, có thể là \u0026ldquo;UPDATED\u0026rdquo; hoặc \u0026ldquo;PROCESSING\u0026rdquo;) text: Nội dung của bài viết để chuyển đổi thành âm thanh (String) voice: Giọng nói Amazon Polly được sử dụng để chuyển đổi âm thanh (String) url: Một liên kết đến bucket S3 nơi tệp âm thanh được lưu trữ (String) Cấu trúc bảng này sẽ cho phép ứng dụng của chúng ta quản lý và truy xuất thông tin về mỗi bài viết blog và tệp âm thanh liên quan một cách hiệu quả.\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-2-create-an-amazon-s3-bucket/",
	"title": "Tạo Amazon S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 2: Tạo Amazon S3 Bucket Trong nhiệm vụ này, chúng ta sẽ tạo một Amazon S3 bucket để lưu trữ tất cả các tệp âm thanh được tạo bởi ứng dụng của chúng ta. S3 (Simple Storage Service) là một cơ sở hạ tầng lưu trữ dữ liệu có khả năng mở rộng cao, đáng tin cậy và độ trễ thấp do AWS cung cấp.\nTại sao chọn S3? Amazon S3 là một lựa chọn lý tưởng cho việc lưu trữ tệp âm thanh của chúng ta vì:\nNó cung cấp độ bền 99.999999999% (11 số 9). Nó có hiệu suất độ trễ thấp. Nó tích hợp liền mạch với các dịch vụ AWS khác. Nó cung cấp các kiểm soát bảo mật linh hoạt. Các bước để tạo một S3 Bucket: Truy cập Bảng điều khiển quản lý AWS\nMở trình duyệt web của bạn và điều hướng đến Bảng điều khiển quản lý AWS. Trong thanh tìm kiếm ở trên cùng, gõ \u0026ldquo;S3\u0026rdquo; và chọn nó từ kết quả. Khởi tạo tạo Bucket\nTrên bảng điều khiển S3, nhấp vào nút \u0026ldquo;Create bucket\u0026rdquo;. Cấu hình cài đặt Bucket\nTên Bucket: Nhập một tên duy nhất như audioposts-123456789.\nThay thế 123456789 bằng một số ngẫu nhiên. 📝 Quan trọng: Sao chép tên bucket này vào trình soạn thảo văn bản của bạn để sử dụng sau này. Khu vực: Chọn một khu vực gần với đối tượng mục tiêu của bạn để có hiệu suất tốt hơn.\nQuyền sở hữu đối tượng: Chọn \u0026ldquo;ACLs enabled\u0026rdquo;.\nCài đặt chặn truy cập công khai:\nBỏ chọn \u0026ldquo;Block all public access\u0026rdquo;. Để tất cả các tùy chọn khác không được chọn. ⚠️ Lưu ý: Trong môi trường sản xuất, nên sử dụng các cài đặt ít quyền nhất có thể. Chúng ta đang sử dụng các cài đặt này cho mục đích minh họa.\nPhiên bản hóa: Cân nhắc bật tính năng này để theo dõi thay đổi và dễ dàng quay lại phiên bản trước.\nMã hóa: Bật mã hóa phía máy chủ để tăng cường bảo mật.\nXác nhận cảnh báo truy cập công khai\nMột hộp cảnh báo sẽ xuất hiện với nội dung: \u0026ldquo;Turning off block all public access might result in this bucket and the objects within becoming public.\u0026rdquo; Chọn hộp kiểm để xác nhận điều này. Tạo Bucket\nNhấp vào nút \u0026ldquo;Create bucket\u0026rdquo; ở cuối trang. Khắc phục sự cố Nếu bạn gặp lỗi \u0026ldquo;The requested bucket name is not available\u0026rdquo;:\nNhấp vào liên kết \u0026ldquo;Edit\u0026rdquo; ở đầu trang. Thay đổi tên bucket. Thử lại cho đến khi bạn tìm thấy một tên khả dụng. Hãy nhớ rằng, mỗi Amazon S3 bucket phải có một tên duy nhất trên toàn cầu trong tất cả các AWS.\nCác bước tiếp theo Bây giờ chúng ta đã thiết lập xong S3 bucket, chúng ta sẵn sàng bắt đầu lưu trữ các tệp âm thanh của mình. Trong nhiệm vụ tiếp theo, chúng ta sẽ cấu hình ứng dụng của mình để tương tác với bucket này, cho phép chúng ta tải lên và truy xuất các tệp âm thanh khi cần thiết.\n"
},
{
	"uri": "//localhost:1313/vi/2.-environment-setup/",
	"title": "Thiết lập Môi trường",
	"tags": [],
	"description": "",
	"content": "Lưu ý Quan trọng Nếu bạn đang tham dự một sự kiện do AWS tổ chức, bạn có thể bỏ qua phần này.\nNếu bạn có quyền truy cập quản trị vào AWS Management Console, bạn có thể sử dụng tài khoản AWS của mình để bắt đầu hội thảo này.\nKhởi chạy một CloudFormation Stack Chúng ta sẽ sử dụng một mẫu AWS CloudFormation để thiết lập các tài nguyên cần thiết cho phòng thí nghiệm trong Khu vực AWS mà bạn chọn. Bước này rất quan trọng vì các hướng dẫn tiếp theo phụ thuộc vào các tài nguyên này. Mẫu CloudFormation sẽ cung cấp các tài nguyên sau:\nIAM Role Bảng Amazon DynamoDB AWS Step Functions State Machine Các bước để Khởi chạy: Tải xuống mẫu CloudFormation: Tải xuống tại đây\nLưu tệp mẫu YAML vào một thư mục trên máy tính của bạn.\nMở AWS CloudFormation Console.\nTrong bảng điều khiển CloudFormation, chọn \u0026ldquo;Tải lên một tệp mẫu\u0026rdquo;.\nChọn mẫu bạn vừa tải xuống, sau đó nhấp vào \u0026ldquo;Tiếp theo\u0026rdquo;.\nĐặt tên cho stack, chẳng hạn như polly-serverless-stack.\nĐối với Cấu hình tùy chọn stack, giữ các giá trị mặc định và chọn Tiếp theo.\nTrong phần Khả năng và biến đổi, xác nhận tất cả các tùy chọn.\nĐể triển khai mẫu, chọn Gửi.\nSau khi mẫu được triển khai, để xem lại các tài nguyên đã tạo, điều hướng đến Tài nguyên CloudFormation, và sau đó chọn stack CloudFormation mà bạn đã tạo.\nLưu ý: Việc triển khai CloudFormation thường mất 1-2 phút để hoàn thành.\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-3-create-an-sns-topic/",
	"title": "Tạo một chủ đề SNS",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 3: Tạo một chủ đề SNS Trong nhiệm vụ này, chúng ta sẽ tạo một chủ đề Amazon Simple Notification Service (SNS) để tạo điều kiện giao tiếp giữa các hàm Lambda của chúng ta. Đây là một bước quan trọng trong kiến trúc serverless của chúng ta để chuyển đổi các bài viết blog thành âm thanh.\nTại sao sử dụng SNS? Kiến trúc của ứng dụng chúng ta chia quá trình chuyển đổi văn bản thành giọng nói thành hai hàm Lambda vì một số lý do:\nXử lý không đồng bộ: Điều này cho phép người dùng nhận được xác nhận ngay lập tức về việc gửi bài viết của họ mà không cần chờ đợi quá trình chuyển đổi âm thanh hoàn tất.\nKhả năng mở rộng: Nó cho phép hệ thống của chúng ta xử lý các bài viết có độ dài khác nhau một cách hiệu quả, từ các đoạn ngắn đến các bài viết dài.\nKiến trúc tách biệt: Bằng cách tách biệt quá trình tạo bài viết và quá trình chuyển đổi âm thanh, chúng ta tạo ra một hệ thống linh hoạt và dễ bảo trì hơn.\nSNS hoạt động như keo dán giữa hai hàm này, cho phép giao tiếp liền mạch và kích hoạt quá trình chuyển đổi âm thanh.\nCác bước để tạo một chủ đề SNS: Truy cập SNS trong Bảng điều khiển AWS\nMở Bảng điều khiển quản lý AWS Trong thanh tìm kiếm ở trên cùng, gõ \u0026ldquo;SNS\u0026rdquo; và chọn \u0026ldquo;Simple Notification Service\u0026rdquo; Điều hướng đến Chủ đề\nTrong bảng điều khiển bên trái, chọn \u0026ldquo;Topics\u0026rdquo; Lưu ý: Bạn có thể cần mở rộng bảng điều khiển bằng cách nhấp vào biểu tượng menu Tạo một Chủ đề Mới\nNhấp vào \u0026ldquo;Create topic\u0026rdquo; Cấu hình các chi tiết sau: Loại: Chọn \u0026ldquo;Standard\u0026rdquo; Tên: Nhập \u0026ldquo;new_posts\u0026rdquo; Tên hiển thị: Nhập \u0026ldquo;New Posts\u0026rdquo; Hoàn tất Tạo Chủ đề\nCuộn xuống cuối trang Nhấp vào \u0026ldquo;Create topic\u0026rdquo; Lưu ARN của Chủ đề\nSau khi tạo, bạn sẽ thấy ARN của Chủ đề (Amazon Resource Name) Sao chép ARN này và lưu vào trình soạn thảo văn bản để sử dụng sau ARN sẽ trông giống như sau: arn:aws:sns:us-west-2:123456789012:new_posts Lưu ý quan trọng Bạn sẽ sử dụng ARN của Chủ đề này khi cấu hình các hàm Lambda trong các nhiệm vụ tiếp theo. Nó rất quan trọng để thiết lập liên kết giao tiếp giữa các hàm của bạn.\nCác bước tiếp theo Với chủ đề SNS của bạn đã được tạo, bạn đã sẵn sàng chuyển sang nhiệm vụ tiếp theo trong việc xây dựng ứng dụng blog-to-audio serverless của mình. Chủ đề SNS này sẽ đóng vai trò quan trọng trong việc kích hoạt quá trình chuyển đổi âm thanh cho mỗi bài viết blog mới.\n"
},
{
	"uri": "//localhost:1313/vi/tasks/",
	"title": "Danh sách nhiệm vụ",
	"tags": [],
	"description": "",
	"content": "📋 Danh sách nhiệm vụ Dưới đây là danh sách 9 nhiệm vụ cần hoàn thành trong dự án của bạn:\nTạo bảng DynamoDB Tạo Amazon S3 Bucket Tạo chủ đề SNS Tạo hàm Lambda cho bài viết mới Tạo hàm Lambda chuyển đổi thành âm thanh Kiểm tra các hàm Tạo hàm Lambda lấy bài viết Công khai hàm Lambda dưới dạng dịch vụ web RESTful Tạo giao diện người dùng không máy chủ Hoàn thành từng nhiệm vụ để đảm bảo dự án của bạn hoạt động trơn tru và hiệu quả.\n"
},
{
	"uri": "//localhost:1313/vi/4.-conclusion/",
	"title": "Kết luận",
	"tags": [],
	"description": "",
	"content": "Kết luận Chúc mừng! Bạn đã hoàn thành thành công các nhiệm vụ sau:\nTạo bảng Amazon DynamoDB để lưu trữ dữ liệu Thiết lập API RESTful với Amazon API Gateway Phát triển các hàm AWS Lambda được kích hoạt bởi API Gateway Tích hợp các hàm AWS Lambda với Amazon Simple Notification Service (SNS) Sử dụng Amazon Polly để tổng hợp giọng nói bằng nhiều ngôn ngữ và giọng điệu khác nhau Trong phòng thí nghiệm này, bạn đã xây dựng một ứng dụng mạnh mẽ chuyển đổi văn bản thành giọng nói trên hàng chục ngôn ngữ và giọng điệu. Mặc dù trường hợp sử dụng chính được trình bày là chuyển đổi các bài viết blog thành âm thanh, giải pháp linh hoạt này có thể được áp dụng cho nhiều kịch bản khác, chẳng hạn như:\nChuyển đổi văn bản trên các trang web thành nội dung âm thanh Thêm chức năng giọng nói vào các ứng dụng web Tạo nội dung truy cập cho người dùng khiếm thị Một trong những lợi thế chính của ứng dụng này là kiến trúc không máy chủ của nó. Không có máy chủ nào cần duy trì hoặc vá lỗi, giảm đáng kể chi phí vận hành. Hơn nữa, ứng dụng này có tính sẵn sàng cao do sử dụng nhiều Vùng Sẵn Sàng của AWS Lambda, Amazon API Gateway, Amazon S3 và Amazon DynamoDB.\nTiếp theo là gì? Bầu trời là giới hạn! Sử dụng cách tiếp cận này như một bàn đạp để tưởng tượng và xây dựng các ứng dụng sáng tạo cung cấp trải nghiệm người dùng nâng cao. Hãy xem xét cách bạn có thể tận dụng các công nghệ này để giải quyết các vấn đề thực tế hoặc tạo ra các cơ hội mới trong lĩnh vực của bạn.\nTài nguyên bổ sung Để hiểu sâu hơn và khám phá thêm các khả năng, hãy xem các tài nguyên quý giá sau:\nXây dựng ứng dụng chuyển văn bản thành giọng nói của riêng bạn với Amazon Polly Amazon Polly là gì? Amazon API Gateway là gì? AWS Lambda là gì? Những tài nguyên này sẽ cung cấp cho bạn kiến thức sâu rộng và các thực hành tốt nhất để nâng cao hơn nữa các ứng dụng không máy chủ và ứng dụng AI trên AWS của bạn.\nSau khi nhận được email xác nhận account của bạn đã được kích hoạt, bạn có thể truy cập vào tất cả dịch vụ của AWS. "
},
{
	"uri": "//localhost:1313/vi/tasks/task-4-create-a-new-post-lambda-function/",
	"title": "Tạo hàm Lambda cho bài viết mới",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 4: Tạo hàm Lambda cho bài viết mới Trong nhiệm vụ này, chúng ta sẽ tạo hàm Lambda đầu tiên cho ứng dụng của mình. Hàm này sẽ đóng vai trò là điểm đầu vào, nhận thông tin về các bài viết mới cần được chuyển đổi thành tệp âm thanh.\nTại sao chọn Lambda? AWS Lambda cho phép chúng ta chạy mã mà không cần cung cấp hoặc quản lý máy chủ. Nó lý tưởng cho trường hợp sử dụng của chúng ta vì:\nChi phí hiệu quả - chúng ta chỉ trả tiền cho thời gian tính toán mà chúng ta sử dụng. Nó tự động mở rộng theo số lượng yêu cầu. Nó tích hợp liền mạch với các dịch vụ AWS khác như DynamoDB và SNS. Các bước để tạo hàm Lambda: Truy cập Lambda trong Bảng điều khiển AWS\nMở Bảng điều khiển quản lý AWS Trong thanh tìm kiếm ở trên cùng, tìm kiếm và chọn \u0026ldquo;Lambda\u0026rdquo; Tạo một hàm mới\nNhấp vào \u0026ldquo;Create function\u0026rdquo; Chọn \u0026ldquo;Author from scratch\u0026rdquo; Cấu hình các cài đặt sau: Tên hàm: PostReader_NewPost Runtime: Python 3.12 Vai trò thực thi: Sử dụng vai trò hiện có Vai trò hiện có: Chọn Lab-Lambda-Role Nhấp vào \u0026ldquo;Create function\u0026rdquo; Thêm mã hàm\nTrong phần Function code, xóa mã hiện có Dán mã Python sau: import boto3 import os import uuid def lambda_handler(event, context): recordId = str(uuid.uuid4()) voice = event[\u0026#34;voice\u0026#34;] text = event[\u0026#34;text\u0026#34;] print(\u0026#39;Generating new DynamoDB record, with ID: \u0026#39; + recordId) print(\u0026#39;Input Text: \u0026#39; + text) print(\u0026#39;Selected voice: \u0026#39; + voice) # Tạo bản ghi mới trong bảng DynamoDB dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(os.environ[\u0026#39;DB_TABLE_NAME\u0026#39;]) table.put_item( Item={ \u0026#39;id\u0026#39; : recordId, \u0026#39;text\u0026#39; : text, \u0026#39;voice\u0026#39; : voice, \u0026#39;status\u0026#39; : \u0026#39;PROCESSING\u0026#39; } ) # Gửi thông báo về bài viết mới tới SNS client = boto3.client(\u0026#39;sns\u0026#39;) client.publish( TopicArn = os.environ[\u0026#39;SNS_TOPIC\u0026#39;], Message = recordId ) return recordId Kiểm tra mã Hàm Lambda thực hiện các nhiệm vụ sau:\nLấy hai tham số đầu vào: Voice: Một trong số hàng chục giọng nói được hỗ trợ bởi Amazon Polly Text: Nội dung của bài viết cần được chuyển đổi thành tệp âm thanh Tạo một bản ghi mới trong bảng DynamoDB với thông tin về bài viết mới Gửi thông tin về bài viết mới tới SNS (ID của bài viết được gửi dưới dạng tin nhắn) Trả về ID của mục DynamoDB cho người dùng Triển khai hàm\nNhấp vào \u0026ldquo;Deploy\u0026rdquo; để lưu các thay đổi của bạn Cấu hình biến môi trường\nĐiều hướng đến tab \u0026ldquo;Configuration\u0026rdquo; Trong bảng điều khiển bên trái, chọn \u0026ldquo;Environment variables\u0026rdquo; Nhấp vào \u0026ldquo;Edit\u0026rdquo; và thêm các biến sau: Key: SNS_TOPIC, Value: [Dán ARN chủ đề SNS của bạn] Key: DB_TABLE_NAME, Value: posts Nhấp vào \u0026ldquo;Save\u0026rdquo; Cập nhật cấu hình hàm\nTrong bảng điều khiển bên trái của tab Configuration, chọn \u0026ldquo;General configuration\u0026rdquo; Nhấp vào \u0026ldquo;Edit\u0026rdquo; Cập nhật Timeout thành 10 giây Nhấp vào \u0026ldquo;Save\u0026rdquo; Kiểm tra hàm Lambda Tạo một sự kiện kiểm tra\nĐiều hướng đến tab \u0026ldquo;Test\u0026rdquo; Cấu hình một sự kiện kiểm tra mới với các chi tiết sau: Tên sự kiện: Joanna JSON sự kiện: { \u0026#34;voice\u0026#34;: \u0026#34;Joanna\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is working!\u0026#34; } Nhấp vào \u0026ldquo;Save\u0026rdquo; Chạy kiểm tra\nNhấp vào \u0026ldquo;Test\u0026rdquo; để thực thi sự kiện kiểm tra của bạn Bạn sẽ thấy thông báo \u0026ldquo;Execution result: succeeded\u0026rdquo; Mở rộng phần \u0026ldquo;Details\u0026rdquo; để xem nhật ký thực thi Chúc mừng! Bạn đã tạo và kiểm tra thành công hàm Lambda cho bài viết mới. Hàm này sẽ đóng vai trò là điểm đầu vào cho ứng dụng của bạn, xử lý các bài viết mới và bắt đầu quá trình chuyển đổi âm thanh.\n"
},
{
	"uri": "//localhost:1313/vi/5.-clean-up/",
	"title": "Dọn Dẹp",
	"tags": [],
	"description": "",
	"content": "Dọn Dẹp Nếu bạn tham gia một sự kiện do AWS tổ chức, bạn không cần lo lắng về việc dọn dẹp bất kỳ tài nguyên nào. AWS sẽ xử lý quá trình dọn dẹp cho bạn.\nTuy nhiên, nếu bạn đã thực hiện hội thảo này trong tài khoản AWS của riêng mình, điều quan trọng là phải xóa stack CloudFormation để tránh bất kỳ chi phí không mong muốn nào trên hóa đơn AWS của bạn. Thực hiện theo các bước sau để dọn dẹp tài nguyên của bạn:\nMở AWS CloudFormation Console.\nChọn stack bạn đã tạo cho hội thảo này (ví dụ: polly-serverless-stack).\nNhấp vào nút \u0026ldquo;Delete\u0026rdquo; ở đầu trang chi tiết stack.\nTrong hộp thoại xác nhận, nhấp vào \u0026ldquo;Delete stack\u0026rdquo; để xác nhận việc xóa.\nChờ quá trình xóa stack hoàn tất. Quá trình này có thể mất vài phút.\nKhi stack đã bị xóa, tất cả các tài nguyên liên quan sẽ được xóa khỏi tài khoản của bạn.\nBằng cách làm theo các bước này, bạn đảm bảo rằng tất cả các tài nguyên được tạo trong suốt hội thảo được dọn dẹp đúng cách, ngăn chặn bất kỳ chi phí không cần thiết nào.\nHãy nhớ rằng, luôn là một thực hành tốt để xem xét tài khoản AWS của bạn thường xuyên và xóa bất kỳ tài nguyên không sử dụng nào để duy trì một môi trường sạch sẽ và hiệu quả về chi phí.\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-5-create-a-convert-to-audio-lambda-function/",
	"title": "Tạo hàm Lambda chuyển đổi văn bản thành âm thanh",
	"tags": [],
	"description": "",
	"content": "Tạo hàm Lambda để chuyển đổi văn bản thành âm thanh Trong bước này, chúng ta sẽ tạo một hàm Lambda để chuyển đổi văn bản được lưu trữ trong bảng DynamoDB thành tệp âm thanh. Hàm này sẽ là một thành phần quan trọng trong ứng dụng chuyển đổi văn bản thành giọng nói không máy chủ của chúng ta.\nCác bước để tạo hàm Lambda Điều hướng đến Lambda Functions\nTrong Bảng điều khiển quản lý AWS, đi đến dịch vụ Lambda. Trong bảng điều khiển bên trái, chọn \u0026ldquo;Functions\u0026rdquo;. Lưu ý: Nếu bảng điều khiển bị thu gọn, nhấp vào biểu tượng menu để mở rộng nó. Bắt đầu tạo hàm\nNhấp vào nút \u0026ldquo;Create function\u0026rdquo;. Cấu hình cài đặt hàm\nChọn \u0026ldquo;Author from scratch\u0026rdquo; cho một triển khai tùy chỉnh. Sử dụng cấu hình sau: Tên hàm: ConvertToAudio Runtime: Python 3.12 Vai trò thực thi: Mở rộng \u0026ldquo;Change default execution role\u0026rdquo; Chọn \u0026ldquo;Use an existing role\u0026rdquo; Chọn \u0026ldquo;Lab-Lambda-Role\u0026rdquo; từ danh sách thả xuống Tạo hàm\nCuộn xuống cuối trang và nhấp vào \u0026ldquo;Create function\u0026rdquo;. Triển khai mã hàm\nTrong phần \u0026ldquo;Function code\u0026rdquo;, bạn sẽ thấy một trình soạn thảo mã. Xóa bất kỳ mã hiện có trong trình soạn thảo. Sao chép và dán mã Python được cung cấp (hiển thị bên dưới) vào trình soạn thảo. Tổng quan về mã hàm Hàm Lambda mà bạn sắp tạo sẽ:\nLấy nội dung văn bản từ DynamoDB dựa trên ID bài viết được cung cấp. Chia văn bản thành các đoạn nhỏ hơn (nếu cần thiết). Sử dụng Amazon Polly để chuyển đổi từng đoạn văn bản thành giọng nói. Lưu các tệp âm thanh kết quả vào một bucket S3. Hàm này được thiết kế để xử lý nội dung dài bằng cách chia nó thành các phần nhỏ hơn, đảm bảo rằng ngay cả các bài viết dài cũng có thể được chuyển đổi thành âm thanh một cách hiệu quả.\nBây giờ, hãy triển khai chức năng cốt lõi của hàm Lambda ConvertToAudio của chúng ta:\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-6-test-the-functions/",
	"title": "Kiểm tra các hàm",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 6: Kiểm tra các hàm Trong nhiệm vụ quan trọng này, chúng ta sẽ xác minh chức năng của hệ thống chuyển đổi blog thành âm thanh không máy chủ của mình. Chúng ta sẽ kiểm tra toàn bộ quy trình làm việc, từ việc kích hoạt hàm Lambda ban đầu đến việc xác nhận tạo tệp âm thanh trong S3.\nTổng quan về quy trình làm việc Kích hoạt thủ công hàm Lambda Bài viết mới Hàm lưu trữ dữ liệu trong DynamoDB và gửi một tin nhắn đến chủ đề SNS SNS kích hoạt hàm Chuyển đổi thành âm thanh Hàm Chuyển đổi thành âm thanh sử dụng Amazon Polly để tạo tệp âm thanh Tệp âm thanh được lưu trữ trong bucket S3 Quy trình kiểm tra từng bước 1. Kích hoạt hàm Lambda Bài viết mới Điều hướng đến bảng điều khiển AWS Lambda Tìm và chọn hàm PostReader_NewPost Nhấp vào nút \u0026ldquo;Test\u0026rdquo; Xác minh thông báo thành công: \u0026ldquo;Execution result: succeeded\u0026rdquo; 2. Xác nhận mục DynamoDB Mở bảng điều khiển AWS DynamoDB Trong ngăn điều hướng, chọn \u0026ldquo;Explore items\u0026rdquo; Chọn bảng \u0026ldquo;posts\u0026rdquo; Xác minh sự hiện diện của hai mục (do chạy thử nghiệm hai lần) Lưu ý trường url trong mục thứ hai, cho thấy chuyển đổi âm thanh thành công 3. Kiểm tra thực thi hàm Chuyển đổi thành âm thanh Quay lại bảng điều khiển AWS Lambda Chọn hàm ConvertToAudio Điều hướng đến tab \u0026ldquo;Monitor\u0026rdquo; Kiểm tra các biểu đồ giám sát cho việc gọi hàm ⚠️ Cảnh báo: Nếu bạn gặp lỗi:\nKiểm tra biểu đồ \u0026ldquo;Error count and success rate\u0026rdquo; Xem nhật ký CloudWatch để biết thông báo lỗi chi tiết Các vấn đề phổ biến: Tên bucket S3 không chính xác trong các biến môi trường 4. Xác minh tệp âm thanh trong S3 Mở bảng điều khiển AWS S3 Tìm và chọn bucket audioposts- Xác nhận sự hiện diện của tệp MP3 Tải xuống và phát tệp - bạn sẽ nghe giọng của Polly Joanna nói \u0026ldquo;This is working!\u0026rdquo; Mẹo khắc phục sự cố Kiểm tra kỹ tất cả các quyền IAM Đảm bảo chủ đề và đăng ký SNS được cấu hình chính xác Xác minh các biến môi trường trong các hàm Lambda Xem lại nhật ký CloudWatch để biết thông tin lỗi chi tiết Các bước tiếp theo Chúc mừng bạn đã kiểm tra thành công hệ thống chuyển đổi blog thành âm thanh không máy chủ của mình! Trong nhiệm vụ tiếp theo, chúng ta sẽ khám phá các cách để nâng cao và tối ưu hóa ứng dụng của bạn.\n🎉 Hoàn thành nhiệm vụ! Bạn đã xác minh chức năng cốt lõi của ứng dụng không máy chủ của mình. Tiếp tục đến thử thách thú vị tiếp theo trong hành trình AWS của bạn!\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-7-create-a-get-post-lambda-function/",
	"title": "Tạo hàm Lambda Get Post",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 7: Tạo hàm Lambda Get Post Trong nhiệm vụ này, chúng ta sẽ tạo hàm Lambda cuối cùng cung cấp phương pháp để truy xuất thông tin về các bài viết từ cơ sở dữ liệu DynamoDB của chúng ta. Hàm này đóng vai trò quan trọng trong hệ thống blog-to-audio không máy chủ của chúng ta bằng cách cho phép truy xuất dữ liệu hiệu quả.\nTạo hàm Lambda Điều hướng đến Bảng điều khiển AWS Management Console Trong thanh tìm kiếm ở trên cùng, gõ \u0026ldquo;Lambda\u0026rdquo; và chọn nó Nhấp vào \u0026ldquo;Create function\u0026rdquo; Chọn \u0026ldquo;Author from scratch\u0026rdquo; và sử dụng các cài đặt sau: Tên hàm: PostReader_GetPost Runtime: Python 3.12 Vai trò thực thi: Sử dụng vai trò hiện có Vai trò hiện có: Lab-Lambda-Role Cuộn xuống và nhấp vào \u0026ldquo;Create function\u0026rdquo; Thêm mã hàm Thay thế mã hiện có trong hàm Lambda bằng mã sau:\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-8-expose-the-lambda-function-as-a-restful-web-service/",
	"title": "Công khai hàm Lambda dưới dạng dịch vụ web RESTful",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 8: Công khai hàm Lambda dưới dạng dịch vụ web RESTful Trong nhiệm vụ quan trọng này, chúng ta sẽ sử dụng Amazon API Gateway để công khai các hàm Lambda của chúng ta dưới dạng dịch vụ web RESTful. Điều này cho phép dễ dàng gọi logic ứng dụng của chúng ta bằng cách sử dụng các giao thức HTTP tiêu chuẩn, nâng cao khả năng truy cập và tích hợp.\nTạo API Gateway Điều hướng đến Bảng điều khiển AWS Management Console Trong thanh tìm kiếm, gõ \u0026ldquo;API Gateway\u0026rdquo; và chọn nó Trong bảng REST API, nhấp vào \u0026ldquo;Build\u0026rdquo; Cấu hình chi tiết API: Chọn \u0026ldquo;New API\u0026rdquo; Tên API: PostReaderAPI Mô tả: API cho Ứng dụng PostReader Loại Endpoint: Regional Nhấp vào \u0026ldquo;Create API\u0026rdquo; Cấu hình các phương thức HTTP Phương thức POST Trong bảng Resources, chọn tài nguyên gốc (/) Nhấp vào \u0026ldquo;Create Method\u0026rdquo; và chọn POST Thiết lập hàm Lambda: Hàm Lambda: Chọn hàm chứa PostReader_NewPost Nhấp vào \u0026ldquo;Create Method\u0026rdquo; Phương thức GET Trong bảng Resources, chọn tài nguyên gốc (/) Nhấp vào \u0026ldquo;Create Method\u0026rdquo; và chọn GET Thiết lập hàm Lambda: Hàm Lambda: Chọn hàm chứa PostReader_GetPost Nhấp vào \u0026ldquo;Create Method\u0026rdquo; Kích hoạt CORS Cross-Origin Resource Sharing (CORS) cho phép gọi API từ các tên miền khác nhau:\nChọn tài nguyên gốc (/) Nhấp vào \u0026ldquo;Enable CORS\u0026rdquo; Cấu hình cài đặt CORS: Phản hồi Gateway: Chọn \u0026ldquo;Default 4XX\u0026rdquo; và \u0026ldquo;Default 5XX\u0026rdquo; Access-Control-Allow-Methods: Chọn GET và POST Nhấp vào \u0026ldquo;Save\u0026rdquo; Cấu hình Tham số Query Đối với phương thức GET:\nChọn phương thức GET Trong cài đặt Method Request, nhấp vào \u0026ldquo;Edit\u0026rdquo; Mở rộng \u0026ldquo;URL Query String Parameters\u0026rdquo; Thêm một tham số query: Tên: postId Nhấp vào \u0026ldquo;Save\u0026rdquo; Thiết lập Request Mapping Để đảm bảo định dạng JSON đúng:\nChọn phương thức GET Đi đến tab \u0026ldquo;Integration Request\u0026rdquo; Chỉnh sửa cài đặt: Request body passthrough: \u0026ldquo;When there are no templates defined (recommended)\u0026rdquo; Mở rộng \u0026ldquo;Mapping Templates\u0026rdquo; Thêm một mẫu mapping: Content-Type: application/json Nội dung mẫu: { \u0026#34;postId\u0026#34;: \u0026#34;$input.params(\u0026#39;postId\u0026#39;)\u0026#34; } Nhấp vào \u0026ldquo;Save\u0026rdquo; Triển khai API Nhấp vào \u0026ldquo;Deploy API\u0026rdquo; Tạo một stage mới: Tên stage: Dev Nhấp vào \u0026ldquo;Deploy\u0026rdquo; Sao chép \u0026ldquo;Invoke URL\u0026rdquo; và lưu lại để sử dụng sau 🎉 Chúc mừng! Bạn đã công khai thành công các hàm Lambda của mình dưới dạng dịch vụ web RESTful bằng cách sử dụng Amazon API Gateway. Sự tích hợp mạnh mẽ này cho phép giao tiếp liền mạch giữa backend không máy chủ của bạn và các ứng dụng hoặc dịch vụ front-end khác nhau.\nCác bước tiếp theo Kiểm tra các endpoint API của bạn bằng các công cụ như Postman hoặc cURL Triển khai các biện pháp bảo mật thích hợp, chẳng hạn như khóa API hoặc tích hợp AWS Cognito Xem xét thiết lập các kế hoạch sử dụng API và điều chỉnh để quản lý lưu lượng Bằng cách hoàn thành nhiệm vụ này, bạn đã thêm một lớp truy cập quan trọng vào ứng dụng blog-to-audio không máy chủ của mình, mở đường cho các tương tác khách hàng mạnh mẽ và có thể mở rộng.\n"
},
{
	"uri": "//localhost:1313/vi/tasks/task-9-create-a-serverless-user-interface/",
	"title": "Tạo giao diện người dùng không máy chủ",
	"tags": [],
	"description": "",
	"content": "Nhiệm vụ 9: Tạo giao diện người dùng không máy chủ Mặc dù ứng dụng đã hoạt động hoàn toàn, nó chỉ được công khai dưới dạng dịch vụ web RESTful. Bây giờ bạn sẽ triển khai một trang web nhỏ trên Amazon S3, đây là một lựa chọn tuyệt vời để lưu trữ các trang web tĩnh. Trang web này sử dụng JavaScript để kết nối với API và cung cấp các chức năng chuyển văn bản thành giọng nói trên một trang web.\nTải các tệp này về máy tính của bạn, sử dụng chuột phải và chọn \u0026ldquo;Save Link As\u0026hellip;\u0026rdquo;.\nindex.html scripts.js styles.css Lưu ý: Đảm bảo rằng mỗi tệp giữ nguyên tên tệp, bao gồm cả phần mở rộng.\nChỉnh sửa tệp scripts.js của bạn bằng Trình chỉnh sửa văn bản, thay thế YOUR_API_GATEWAY_ENDPOINT (ở dòng đầu tiên) bằng URL Invoke mà bạn đã sao chép trước đó.\nKết quả mong đợi:\nvar API_ENDPOINT = \u0026#34;https://xxxxx.execute-api.us-west-2.amazonaws.com/Dev\u0026#34; Bây giờ bạn tải các tệp này lên một bucket Amazon S3.\nỞ đầu Bảng điều khiển AWS Management Console, trong thanh tìm kiếm, tìm và chọn S3. Chọn Create bucket và cấu hình các chi tiết sau: Tên bucket: www-BUCKET Thay thế BUCKET bằng tên của bucket audioposts của bạn Sao chép tên của bucket vào trình chỉnh sửa văn bản của bạn. Bạn sẽ sử dụng tên bucket sau này. Bạn thay đổi quyền của bucket để trang web có thể truy cập được cho mọi người. Dưới Object Ownership, chọn ACLs enabled Dưới Block Public Access settings for this bucket bỏ chọn tùy chọn Block all public access, và sau đó để tất cả các tùy chọn khác không được chọn. Lưu ý: Lưu ý rằng tất cả các tùy chọn riêng lẻ vẫn không được chọn. Khi bỏ chọn tất cả quyền truy cập công khai, bạn phải chọn các tùy chọn riêng lẻ áp dụng cho tình huống và mục tiêu bảo mật của bạn. Trong môi trường sản xuất, nên sử dụng các cài đặt ít quyền nhất có thể.\nMột hộp cảnh báo xuất hiện nói rằng: Tắt chặn tất cả quyền truy cập công khai có thể dẫn đến việc bucket này và các đối tượng bên trong trở nên công khai. AWS khuyến nghị bạn bật chặn tất cả quyền truy cập công khai, trừ khi quyền truy cập công khai được yêu cầu cho các trường hợp sử dụng cụ thể và đã được xác minh như lưu trữ trang web tĩnh.\nChọn hộp kiểm bên cạnh I acknowledge that the current settings might result in this bucket and the objects within becoming public. Chọn Create bucket Sau khi bucket đã được tạo, chọn nó từ danh sách bucket và tải lên ba tệp vào bucket www mới của bạn. Lưu ý: Các tệp phải được đặt tên: index.html, scripts.js và styles.css\nTrên trang bucket, chọn tab Permissions ở trên cùng.\nCuộn xuống phần Bucket Policy và chọn nút Edit.\nDán chính sách này vào trình chỉnh sửa:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:GetObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:s3:::www-BUCKET/*\u0026#34; ] } ] } Thay thế www-BUCKET bằng tên của bucket www-audioposts của bạn.\nChọn Save changes.\nCẢNH BÁO: Nếu bạn nhận được lỗi rằng Chính sách có tài nguyên không hợp lệ, hãy xác nhận rằng bạn đã chỉnh sửa dòng Tài nguyên để khớp với tên bucket của bạn.\nLưu ý: Bạn có thể bỏ qua cảnh báo rằng Bucket này có quyền truy cập công khai. Điều này là có chủ đích.\nCuối cùng, bạn kích hoạt lưu trữ trang web tĩnh, điều này làm cho bucket hoạt động như một trang web tĩnh.\nChọn tab Properties. Bỏ qua lỗi Quyền AWS CloudTrail. Cuộn xuống phần Static website hosting và chọn Edit. Chọn Enable cho lưu trữ trang web tĩnh. Tài liệu chỉ mục: index.html Tài liệu lỗi: index.html Lưu ý: Hiện tại chúng ta đang sử dụng tệp index.html làm tài liệu lỗi. Chọn Save changes. Sao chép URL Endpoint vào clipboard của bạn. Và đó là tất cả! Bạn có thể kiểm tra xem trang web có hoạt động hay không.\nMở một tab trình duyệt web mới và dán URL Endpoint mà bạn vừa sao chép.\nBạn sẽ thấy một trang trông như thế này: Nếu bạn viết gì đó vào ô văn bản và chọn Say it, sự kiện sẽ được gửi đến ứng dụng của bạn. Ứng dụng sẽ chuyển đổi văn bản thành tệp âm thanh một cách không đồng bộ. Tùy thuộc vào kích thước của văn bản bạn cung cấp, có thể mất vài giây hoặc vài phút để chuyển đổi nó thành tệp âm thanh.\nĐể xem các bài viết và tệp âm thanh của chúng, nhập ID bài viết hoặc * vào ô Tìm kiếm: Nút Play để nghe âm thanh.\nHoàn thành nhiệm vụ\nBạn có thể tiếp tục nhiệm vụ tiếp theo.\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]